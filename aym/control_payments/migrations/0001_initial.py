# Generated by Django 5.0.1 on 2024-01-25 17:35

import control_payments.validators
import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="DebtType",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        db_column="id",
                        db_comment="ID of the debt type",
                        default=uuid.uuid4,
                        editable=False,
                        error_messages={
                            "blank": "ID cannot be blank",
                            "null": "ID cannot be null",
                        },
                        help_text="ID of the debt type",
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_column="name",
                        db_comment="Name of the debt type",
                        error_messages={
                            "blank": "Name cannot be blank",
                            "max_length": "Name cannot be longer than 30 characters",
                            "null": "Name cannot be null",
                        },
                        help_text="Name of the debt type",
                        max_length=30,
                        validators=[
                            django.core.validators.MinLengthValidator(
                                3, message="Name must have at least 10 characters"
                            )
                        ],
                        verbose_name="Name",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        db_column="description",
                        db_comment="Description of the debt type",
                        error_messages={
                            "blank": "Description cannot be blank",
                            "max_length": "Description cannot be longer than 255 characters",
                            "null": "Description cannot be null",
                        },
                        help_text="Description of the debt type",
                        max_length=255,
                        validators=[
                            django.core.validators.MinLengthValidator(
                                10,
                                message="Description must have at least 10 characters",
                            )
                        ],
                        verbose_name="Description",
                    ),
                ),
                (
                    "active",
                    models.BooleanField(
                        db_column="active",
                        db_comment="Active of the debt type",
                        default=True,
                        error_messages={
                            "blank": "Active cannot be blank",
                            "null": "Active cannot be null",
                        },
                        help_text="Active of the debt type",
                        verbose_name="Active",
                    ),
                ),
            ],
            options={
                "verbose_name": "Debt type",
                "verbose_name_plural": "Debt types",
                "db_table": "debt_type",
            },
        ),
        migrations.CreateModel(
            name="Resident",
            fields=[
                (
                    "cpf",
                    models.CharField(
                        db_column="cpf",
                        db_comment="CPF of the resident",
                        error_messages={
                            "blank": "CPF cannot be blank",
                            "max_length": "CPF cannot be longer than 11 characters",
                            "null": "CPF cannot be null",
                        },
                        help_text="CPF of the resident",
                        max_length=11,
                        primary_key=True,
                        serialize=False,
                        validators=[control_payments.validators.validate_cpf],
                        verbose_name="CPF",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_column="name",
                        db_comment="Name of the resident",
                        error_messages={
                            "blank": "Name cannot be blank",
                            "max_length": "Name cannot be longer than 255 characters",
                            "null": "Name cannot be null",
                        },
                        help_text="Name of the resident",
                        max_length=255,
                        validators=[
                            django.core.validators.MinLengthValidator(
                                10, message="Name must have at least 10 characters"
                            )
                        ],
                        verbose_name="Complete name",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        db_column="email",
                        db_comment="Email of the resident",
                        error_messages={
                            "blank": "Email cannot be blank",
                            "max_length": "Email cannot be longer than 255 characters",
                            "null": "Email cannot be null",
                        },
                        help_text="Email of the resident",
                        max_length=255,
                        verbose_name="Email",
                    ),
                ),
                (
                    "age",
                    models.IntegerField(
                        db_column="age",
                        db_comment="Age of the resident",
                        error_messages={
                            "blank": "Age cannot be blank",
                            "null": "Age cannot be null",
                        },
                        help_text="Age of the resident",
                        validators=[
                            django.core.validators.MinValueValidator(
                                17, message="Age must be at least 17"
                            ),
                            django.core.validators.MaxValueValidator(
                                100, message="Age must be at most 100"
                            ),
                        ],
                        verbose_name="Age",
                    ),
                ),
                (
                    "discord_nickname",
                    models.CharField(
                        db_column="discord_nickname",
                        db_comment="Discord nickname of the resident",
                        error_messages={
                            "blank": "Discord nickname cannot be blank",
                            "max_length": "Discord nickname cannot be longer than 255 characters",
                            "null": "Discord nickname cannot be null",
                        },
                        help_text="Discord nickname of the resident",
                        max_length=255,
                        validators=[
                            django.core.validators.MinLengthValidator(
                                3,
                                message="Discord nickname must have at least 3 characters",
                            ),
                            django.core.validators.RegexValidator(
                                message="Discord nickname must have only letters, numbers and underscores",
                                regex="^[a-zA-Z0-9_]+$",
                            ),
                        ],
                        verbose_name="Discord nickname",
                    ),
                ),
                (
                    "active",
                    models.BooleanField(
                        db_column="active",
                        db_comment="Active of the resident",
                        default=True,
                        error_messages={
                            "blank": "Active cannot be blank",
                            "null": "Active cannot be null",
                        },
                        help_text="Active of the resident",
                        verbose_name="Active",
                    ),
                ),
            ],
            options={
                "verbose_name": "Resident",
                "verbose_name_plural": "Residents",
                "db_table": "resident",
            },
        ),
        migrations.CreateModel(
            name="Debts",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        db_column="id",
                        db_comment="ID of the debt",
                        default=uuid.uuid4,
                        editable=False,
                        error_messages={
                            "blank": "ID cannot be blank",
                            "null": "ID cannot be null",
                        },
                        help_text="ID of the debt",
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "due_date",
                    models.DateField(
                        db_column="due_date",
                        db_comment="Due date of the debt",
                        error_messages={
                            "blank": "Due date cannot be blank",
                            "null": "Due date cannot be null",
                        },
                        help_text="Due date of the debt",
                        verbose_name="Due date",
                    ),
                ),
                (
                    "debt_value",
                    models.DecimalField(
                        db_column="debt_value",
                        db_comment="Debt value of the debt",
                        decimal_places=2,
                        error_messages={
                            "blank": "Debt value cannot be blank",
                            "max_decimal_places": "Debt value cannot have more than 2 decimal places",
                            "max_digits": "Debt value cannot have more than 10 digits",
                            "null": "Debt value cannot be null",
                        },
                        help_text="Debt value of the debt",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(
                                0.01, message="Debt value must be at least 0.01"
                            ),
                            django.core.validators.MaxValueValidator(
                                999999.99,
                                message="Debt value must be at most 999999.99",
                            ),
                        ],
                        verbose_name="Debt value",
                    ),
                ),
                (
                    "active",
                    models.BooleanField(
                        db_column="active",
                        db_comment="Active of the debt",
                        default=True,
                        error_messages={
                            "blank": "Active cannot be blank",
                            "null": "Active cannot be null",
                        },
                        help_text="Active of the debt",
                        verbose_name="Active",
                    ),
                ),
                (
                    "debt_type",
                    models.ForeignKey(
                        db_column="debt_type",
                        db_comment="Debt type of the debt",
                        error_messages={
                            "blank": "Debt type cannot be blank",
                            "null": "Debt type cannot be null",
                        },
                        help_text="Debt type of the debt",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="control_payments.debttype",
                        verbose_name="Debt type",
                    ),
                ),
            ],
            options={
                "verbose_name": "Debt",
                "verbose_name_plural": "Debts",
                "db_table": "debt",
            },
        ),
        migrations.CreateModel(
            name="Payment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        db_column="id",
                        db_comment="ID of the payment",
                        default=uuid.uuid4,
                        editable=False,
                        error_messages={
                            "blank": "ID cannot be blank",
                            "null": "ID cannot be null",
                        },
                        help_text="ID of the payment",
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "pay_date",
                    models.DateField(
                        db_column="pay_date",
                        db_comment="Pay date of the payment",
                        error_messages={
                            "blank": "Pay date cannot be blank",
                            "null": "Pay date cannot be null",
                        },
                        help_text="Pay date of the payment",
                        verbose_name="Pay date",
                    ),
                ),
                (
                    "pay_value",
                    models.DecimalField(
                        db_column="pay_value",
                        db_comment="Pay value of the payment",
                        decimal_places=2,
                        error_messages={
                            "blank": "Pay value cannot be blank",
                            "max_decimal_places": "Pay value cannot have more than 2 decimal places",
                            "max_digits": "Pay value cannot have more than 10 digits",
                            "null": "Pay value cannot be null",
                        },
                        help_text="Pay value of the payment",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(
                                0.01, message="Pay value must be at least 0.01"
                            ),
                            django.core.validators.MaxValueValidator(
                                999999.99, message="Pay value must be at most 999999.99"
                            ),
                        ],
                        verbose_name="Pay value",
                    ),
                ),
                (
                    "resident",
                    models.ForeignKey(
                        db_column="resident",
                        db_comment="Resident of the payment",
                        error_messages={
                            "blank": "Resident cannot be blank",
                            "null": "Resident cannot be null",
                        },
                        help_text="Resident of the payment",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="control_payments.resident",
                        verbose_name="Resident",
                    ),
                ),
            ],
            options={
                "verbose_name": "Payment",
                "verbose_name_plural": "Payments",
                "db_table": "payment",
            },
        ),
        migrations.CreateModel(
            name="DebtCollection",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        db_column="id",
                        db_comment="ID of the debt collection",
                        default=uuid.uuid4,
                        editable=False,
                        error_messages={
                            "blank": "ID cannot be blank",
                            "null": "ID cannot be null",
                        },
                        help_text="ID of the debt collection",
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "debt_collection_date",
                    models.DateField(
                        db_column="debt_collection_date",
                        db_comment="Debt collection date of the debt collection",
                        error_messages={
                            "blank": "Debt collection date cannot be blank",
                            "null": "Debt collection date cannot be null",
                        },
                        help_text="Debt collection date of the debt collection",
                        verbose_name="Debt collection date",
                    ),
                ),
                (
                    "debt_collection_value",
                    models.DecimalField(
                        db_column="debt_collection_value",
                        db_comment="Debt collection value of the debt collection",
                        decimal_places=2,
                        error_messages={
                            "blank": "Debt collection value cannot be blank",
                            "max_decimal_places": "Debt collection value cannot have more than 2 decimal places",
                            "max_digits": "Debt collection value cannot have more than 10 digits",
                            "null": "Debt collection value cannot be null",
                        },
                        help_text="Debt collection value of the debt collection",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(
                                0.01,
                                message="Debt collection value must be at least 0.01",
                            ),
                            django.core.validators.MaxValueValidator(
                                999999.99,
                                message="Debt collection value must be at most 999999.99",
                            ),
                        ],
                        verbose_name="Debt collection value",
                    ),
                ),
                (
                    "resident",
                    models.ForeignKey(
                        db_column="resident",
                        db_comment="Resident of the debt collection",
                        error_messages={
                            "blank": "Resident cannot be blank",
                            "null": "Resident cannot be null",
                        },
                        help_text="Resident of the debt collection",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="control_payments.resident",
                        verbose_name="Resident",
                    ),
                ),
            ],
            options={
                "verbose_name": "Debt collection",
                "verbose_name_plural": "Debt collections",
                "db_table": "debt_collection",
            },
        ),
        migrations.CreateModel(
            name="ApportionmentRules",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        db_column="id",
                        db_comment="ID of the apportionment rule",
                        default=uuid.uuid4,
                        editable=False,
                        error_messages={
                            "blank": "ID cannot be blank",
                            "null": "ID cannot be null",
                        },
                        help_text="ID of the apportionment rule",
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "percentage",
                    models.DecimalField(
                        db_column="percentage",
                        db_comment="Percentage of the apportionment rule",
                        decimal_places=2,
                        error_messages={
                            "blank": "Percentage cannot be blank",
                            "max_decimal_places": "Percentage cannot have more than 2 decimal places",
                            "max_digits": "Percentage cannot have more than 5 digits",
                            "null": "Percentage cannot be null",
                        },
                        help_text="Percentage of the apportionment rule",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(
                                0.01, message="Percentage must be at least 0.01"
                            ),
                            django.core.validators.MaxValueValidator(
                                100.0, message="Percentage must be at most 100.00"
                            ),
                        ],
                        verbose_name="Percentage",
                    ),
                ),
                (
                    "active",
                    models.BooleanField(
                        db_column="active",
                        db_comment="Active of the apportionment rule",
                        default=True,
                        error_messages={
                            "blank": "Active cannot be blank",
                            "null": "Active cannot be null",
                        },
                        help_text="Active of the apportionment rule",
                        verbose_name="Active",
                    ),
                ),
                (
                    "debt_type",
                    models.ForeignKey(
                        db_column="debt_type",
                        db_comment="Debt type of the apportionment rule",
                        error_messages={
                            "blank": "Debt type cannot be blank",
                            "null": "Debt type cannot be null",
                        },
                        help_text="Debt type of the apportionment rule",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="control_payments.debttype",
                        verbose_name="Debt type",
                    ),
                ),
                (
                    "resident",
                    models.ForeignKey(
                        db_column="resident",
                        db_comment="Resident of the apportionment rule",
                        error_messages={
                            "blank": "Resident cannot be blank",
                            "null": "Resident cannot be null",
                        },
                        help_text="Resident of the apportionment rule",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="control_payments.resident",
                        verbose_name="Resident",
                    ),
                ),
            ],
            options={
                "verbose_name": "Apportionment rule",
                "verbose_name_plural": "Apportionment rules",
                "db_table": "apportionment_rules",
            },
        ),
        migrations.CreateModel(
            name="Apportionment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        db_column="id",
                        db_comment="ID of the apportionment",
                        default=uuid.uuid4,
                        editable=False,
                        error_messages={
                            "blank": "ID cannot be blank",
                            "null": "ID cannot be null",
                        },
                        help_text="ID of the apportionment",
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "value",
                    models.DecimalField(
                        db_column="value",
                        db_comment="Value of the apportionment",
                        decimal_places=2,
                        error_messages={
                            "blank": "Value cannot be blank",
                            "max_decimal_places": "Value cannot have more than 2 decimal places",
                            "max_digits": "Value cannot have more than 10 digits",
                            "null": "Value cannot be null",
                        },
                        help_text="Value of the apportionment",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(
                                0.01, message="Value must be at least 0.01"
                            ),
                            django.core.validators.MaxValueValidator(
                                999999.99, message="Value must be at most 999999.99"
                            ),
                        ],
                        verbose_name="Value",
                    ),
                ),
                (
                    "active",
                    models.BooleanField(
                        db_column="active",
                        db_comment="Active of the apportionment",
                        default=True,
                        error_messages={
                            "blank": "Active cannot be blank",
                            "null": "Active cannot be null",
                        },
                        help_text="Active of the apportionment",
                        verbose_name="Active",
                    ),
                ),
                (
                    "debt",
                    models.ForeignKey(
                        db_column="debt",
                        db_comment="Debt of the apportionment",
                        error_messages={
                            "blank": "Debt cannot be blank",
                            "null": "Debt cannot be null",
                        },
                        help_text="Debt of the apportionment",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="control_payments.debts",
                        verbose_name="Debt",
                    ),
                ),
                (
                    "resident",
                    models.ForeignKey(
                        db_column="resident",
                        db_comment="Resident of the apportionment",
                        error_messages={
                            "blank": "Resident cannot be blank",
                            "null": "Resident cannot be null",
                        },
                        help_text="Resident of the apportionment",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="control_payments.resident",
                        verbose_name="Resident",
                    ),
                ),
            ],
            options={
                "verbose_name": "Apportionment",
                "verbose_name_plural": "Apportionments",
                "db_table": "apportionment",
            },
        ),
    ]
